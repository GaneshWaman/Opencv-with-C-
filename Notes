Linear Image Filters
1.	Homogeneous Smoothing
2.	Gaussian Smoothing
3.	Median Smoothing
4.	Bilateral Smoothing

Homogeneous Smoothing:
The filter used here the most simplest one called homogeneous smoothing or box filter.
It does smoothing by sliding a kernel (filter) across the image. Each pixel value will be calculated based on the value of the kernel and the overlapping pixel's value of the original image.
We need to choose right size of the kernel. If it's too large, it may blur and remove small features of the image. But if it is too small, we may not be able to eliminate noises of the image.

The syntax of the blur() looks like this:
void blur(InputArray src, OutputArray dst, Size ksize, Point anchor=Point(-1,-1), int borderType=BORDER_DEFAULT )

The parameters are:
1.	src - input image; it can have any number of channels, which are processed independently, but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.
2.	dst - output image of the same size and type as src.
3.	ksize - blurring kernel size.
4.	anchor - anchor point; default value Point(-1,-1) means that the anchor is at the kernel center.
5.	borderType - border mode used to extrapolate pixels outside of the image.

Smoothing (Blurring) by Gaussian
This is the most commonly used blurring method. We can use this filter to eliminate noises in an image. We need to very careful in choosing the size of the kernel and the standard deviation of the Gaussian distribution in x and y direction
GaussianBlur() syntax:
void GaussianBlur(InputArray src, OutputArray dst, Size ksize, double sigmaX, double sigmaY=0, int borderType=BORDER_DEFAULT )

Parameters:
1.	src - input image; the image can have any number of channels, which are processed independently, but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.
2.	dst - output image of the same size and type as src.
3.	ksize - Gaussian kernel size. ksize.width and ksize.height can differ but they both must be positive and odd. Or, they can be zeroâ™s and then they are computed from sigma*.
4.	sigmaX - Gaussian kernel standard deviation in X direction.
5.	sigmaY - Gaussian kernel standard deviation in Y direction; if sigmaY is zero, it is set to be equal to sigmaX, if both sigmas are zeros, they are computed from ksize.width and ksize.height , respectively; to fully control the result regardless of possible future modifications of all this semantics, it is recommended to specify all of ksize, sigmaX, and sigmaY.
6.	borderType - pixel extrapolation method.


